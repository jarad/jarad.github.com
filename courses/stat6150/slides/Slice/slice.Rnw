\documentclass[handout, aspectratio=169]{beamer}

\input{../frontmatter}
\input{../commands}

\title{Slice sampling}


<<options, results='hide', echo=FALSE, purl=FALSE>>=
opts_chunk$set(fig.width=9, 
               fig.height=5, 
               out.width='.8\\linewidth', 
               fig.align='center', 
               size='tiny',
               echo=FALSE,
               cache=TRUE)
options(width=100)
@

<<libraries, message=FALSE, warning=FALSE>>=
# library("plyr")
library("dplyr")
# library("reshape2")
library("ggplot2")
library("gridExtra")
@

<<set_seed, echo=FALSE>>=
set.seed(2)
@

\begin{document}

\frame{\maketitle}



 \section{Slice sampling}
\begin{frame}
\frametitle{Slice sampling}
Suppose the target distribution is $p(\theta|y)$ with scalar $\theta$. \pause Then,
\[ p(\theta|y) = \int_0^{p(\theta|y)} 1\, du \]
\pause Thus, $p(\theta|y)$ can be thought of as the marginal distribution of 
\[ (\theta,U) \sim \mbox{Unif}\{(\theta,u):0<u<p(\theta|y)\} \]
where $u$ is an \alert{auxiliary variable}.

\vspace{0.2in} \pause 

\alert{Slice sampling} performs the following Gibbs sampler: \pause 
\begin{enumerate}
\item $u^t|\theta^{t-1},y \sim \mbox{Unif}\{u:0<u<p(\theta^{t-1}|y)\}$ \pause and
\item $\theta^t|u^t,y \sim \mbox{Unif}\{\theta: u^t<p(\theta|y) \}$.
\end{enumerate}
\end{frame}





\begin{frame}[fragile]
\frametitle{Slice sampler for exponential distribution}
Consider the target $\theta|y \sim Exp(1)$,\pause  then 
\[ \{\theta: u<p(\theta|y) \} = (0,-\log(u)). \]

\pause 

<<uniform_region, fig.width=10, fig.height=4>>=
u = 0.5; x = -log(u)
curve(dexp, 0, 1.5, ylab="u", xlab=expression(theta), main="Target disribution", ylim=c(0,1))
curve(dexp, 0, x, add=TRUE, lwd=3, col="red")
segments(0,u,x,u,col="gray")
segments(x,0,x,u,col="gray")
segments(0,0,x,0,lwd=3, col="red")
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Slice sampling in R}
<<slice_sampling_function, echo=TRUE>>=
slice = function(n,init_theta,target,A) {
  u = theta = rep(NA,n)
  theta[1] = init_theta
  u[1] = runif(1,0,target(theta[1])) # This never actually gets used

  for (i in 2:n) {
    u[i] = runif(1,0,target(theta[i-1]))
    endpoints = A(u[i],theta[i-1]) # The second argument is used in the second example
    theta[i] = runif(1, endpoints[1],endpoints[2])
  }
  return(list(theta=theta,u=u))
}
@

<<exponential_example, dependson='slice_sampling_function', echo=TRUE>>=
set.seed(6)
A = function(u,theta=NA) c(0,-log(u))
res = slice(10, 0.1, dexp, A)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{}
<<slice_sampling_animation_function>>=
slice_sampling_animation = function(theta, u, ask=interactive(), df, ...) {
  x = cbind(theta,u)
  
  x_lb = min(theta)
  x_ub = max(theta)
  
  y_lb = 0
  y_ub = max(df(theta))
  
  for (i in 2:nrow(x)) {
    jj = (2:i)[-(i-1)] # vector from 2:(i-1) and NULL if i=2
    for (j in 1:6) {
      plot.new()
      
      # All previous plotting
      curve(df, from=x_lb, to=x_ub, ylim=c(y_lb,y_ub), ...)
      segments(x[jj-1,1], x[jj,2], x[jj-1,1], x[jj-1,2], col="gray")
      segments(x[jj-1,1], x[jj,2], x[jj,1], x[jj  ,2], col="gray")
      points(x[(1:(i-1)),1], x[(1:(i-1)),2], col="red", pch=19)
      
      # New plotting
      if (j>1 & j<4) abline(v=x[i-1,1], lty=2)
      if (j>2) arrows(x[i-1,1], x[i-1,2], x[i-1,1], x[i,2], length=0.1)
      if (j>3 & j<6) abline(h=x[i,2], lty=2)
      if (j>4) arrows(x[i-1,1], x[i,2], x[i,1], x[i,2], length=0.1)
      if (j>5) points(x[i,1], x[i,2], col="red", pch=19)
      
      if (ask) readline("hit <enter>:")
    }
  }
  
  # Final plot
  jj=2:nrow(x)
  curve(df, from=x_lb, to=x_ub, ylim=c(y_lb,y_ub), ...)
  segments(x[jj-1,1], x[jj,2], x[jj-1,1], x[jj-1,2], col="gray")
  segments(x[jj-1,1], x[jj,2], x[jj,1], x[jj  ,2], col="gray")
  points(x[,1], x[,2], col="red", pch=19)
}
@

<<exponential_example_animation, dependson=c('slice_sampling_animation_function', 'exponential_example'), fig.show='animate'>>=
with(res, slice_sampling_animation(theta, u, df=dexp, xlab=expression(theta), ylab='u', main='Slice sampling an Exp(1) distribution'))
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Histogram of draws}
<<slice_sampling_histogram>>=
hist(slice(1e4, 0.1, dexp, A)$theta, freq=F, 100, main="Slice sampling approximation to Exp(1) distribution", xlab=expression(theta))
curve(dexp, add=TRUE, col='red')
@
\end{frame}


\subsection{Posterior}
\begin{frame}[fragile]
\frametitle{Normal model with unknown mean}

Let 
\[ 
Y_i \stackrel{ind}{\sim} N(\theta, 1) 
\quad \mbox{ and } \quad 
\theta \sim La(0,1)
\]
\pause
then
\[ 
p(\theta|y) \propto \left[\prod_{i=1}^n N(y_i;\theta,1) \right] La(\theta;0,1)
\]

<<posterior_example_functions, echo=TRUE>>=
n = 5
y = rnorm(n,.2)
f = Vectorize(function(theta, y.=y) exp(sum(dnorm(y., theta, log=TRUE)) + dexp(abs(theta), log=TRUE)))

# Function to numerically find endpoints
A = function(u, xx, f.=f) {
  left_endpoint  = uniroot(function(x) f.(x) - u, c(-10^10, xx))
  right_endpoint = uniroot(function(x) f.(x) - u, c( 10^10, xx))
  c(left_endpoint$root, right_endpoint$root)
}
@

<<slice_sampling_posterior_example, dependson=c('slice_sampling_function','posterior_example_functions'), echo=TRUE>>=
res = slice(20, mean(y), f, A)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Slice sampling using numerically calculated endpoints}
<<posterior_example, dependson=c('slice_sampling_animation_function','slice_sampling_posterior_example'), fig.show='animate'>>=
i = integrate(f, -Inf, Inf)
with(res, 
     slice_sampling_animation(theta, 
                              u, df=f, xlab=expression(theta), ylab='u', main='Slice sampling a posterior'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Histogram of draws}
<<histogram_posterior_example, dependson=c('slice_sampling_function','posterior_example_functions')>>=
hist(slice(1e4, 0.1, f, A)$theta, 
     freq=F, 
     100, 
     main="Slice sampling approximation to posterior", 
     xlab=expression(theta))
curve(f(x)/i$value, 
      add=TRUE, 
      col='red')
@
\end{frame}




\subsection{Learning the endpoints}
\begin{frame}
\frametitle{An alternative augmentation}

Suppose 
\[ 
Y_i \stackrel{ind}{\sim} N(\theta, 1) 
\quad \mbox{ and } \quad 
\theta \sim La(0,1)
\]
\pause
but now, we will use the augmentation
\[
p(u,\theta)\propto p(\theta) \I(0<u<p(y|\theta))
\]
\pause
The full conditional distributions are now 
\begin{enumerate}
\item $u|\theta,y \sim Unif(0,p(y|\theta))$ \pause and
\item $\theta|u,y \sim p(\theta)\I(u<p(y|\theta))$.
\end{enumerate}
\end{frame}


\begin{frame}
\frametitle{Sampling $\theta|u,y$}
\small
Now we need to sample from 
\[ p(\theta)\I(u<p(y|\theta)). \]
\pause
If $p(\theta)$ is unimodal, then this is equivalent to 
\[ p(\theta)\I(\theta_L(u) < \theta < \theta_U(u)) \]
for some bounds $\theta_L(u)$ and $\theta_U(u)$ which depend on $u$. 

\vspace{0.2in} \pause

One way to learn these is to sample from $p(\theta)$ and update the bounds\pause, e.g. if $\theta^{(i-1)}$ is our current value in the chain, we know $u<p(y|\theta^{(i-1)})$ or, equivalently, $\theta_L(u) < \theta^{(i-1)} < \theta_U(u)$. \pause Letting $u^{(i)}$ be the current value for the auxiliary variable and setting $\theta_L(u^{(i)})$ [$\theta_U(u^{(i)})$] to the lower [upper] bound of the support for $\theta$, we can 
\begin{enumerate}[<+->]
\item Sample $\theta^* \sim p(\theta)\I(\theta_L(u^{(i)}) < \theta < \theta_U(u^{(i)}))$.
\item Set  $\theta^{(i)} = \theta^*$ if $u^{(i)}<p(y|\theta^*)$, otherwise 
  \begin{enumerate}
  \item set $\theta_L(u^{(i)}) = \theta^*$ if $\theta^* <  \theta^{(i-1)}$ or
  \item set $\theta_U(u^{(i)}) = \theta^*$ if $\theta^* > \theta^{(i-1)}$ and
  \item return to Step 1.
  \end{enumerate}
\end{enumerate}
\end{frame}



\begin{frame}
\frametitle{Learning the endpoints}
<<learning_the_endpoints>>=
curve(dnorm, -2, 2, xlab=expression(theta),
      ylab = 'u')
u = .25
theta = .5
points(theta, u, col='red', pch=19)
abline(h=u, lty=3, col='gray')
points(-1.5, u, col='black', pch=8)
legend('topright', c('Current','Proposed'), pch=c(19,8), col=c('red','black'))
@
\end{frame}



\begin{frame}[fragile]
\frametitle{R code}
<<slice2, echo=TRUE>>=
slice2 = function(n, init_theta, like, qprior) {
    u = theta = rep(NA, n)
    theta[1] = init_theta
    u[1] = runif(1, 0, like(theta[1]))
    
    for (i in 2:n) {
        u[i] = runif(1, 0, like(theta[i - 1]))
        success = FALSE
        endpoints = 0:1
        while (!success) {
          
            # Inverse CDF
            up = runif(1, endpoints[1], endpoints[2])
            theta[i] = qprior(up)
            
            if (u[i] < like(theta[i])) {
                success = TRUE
            } else {
                # Updated endpoints when proposed value is rejected
                if (theta[i] > theta[i - 1]) 
                  endpoints[2] = up
                if (theta[i] < theta[i - 1]) 
                  endpoints[1] = up
            }
        }
        
    }
    return(list(theta = theta, u = u))
}
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Histogram}
<<learning_endpoints, dependson=c('posterior_example_functions','slice2'), eCho=TRUE>>=
qprior = function(p) ifelse(p<.5, -qexp(1-2*p), qexp(2*(p-.5)))
res = slice2(1e4, 0, function(theta) exp(sum(dnorm(y,theta,log=TRUE))), qprior)
hist(res$theta, 
     breaks = 100, 
     prob=TRUE, 
     main="Slice sampling approximation to posterior", 
     xlab=expression(theta))
curve(f(x)/i$value, 
      add=TRUE, 
      col='red')
@
\end{frame}



\subsection{Stepping-out slice sampling}
\begin{frame}
\frametitle{Bimodal target distributions}

Consider the posterior 
\[ 
p(\theta|y) = \frac{1}{2} N(\theta;-2,1) + \frac{1}{2} N(\theta;2,1) 
\]
\pause

<<bimodal_target, fig.width=10>>=
lim = 5
target = function(x) dnorm(x, -2)/2 + dnorm(x, 2)/2
curve(target,-lim,lim)
@
\end{frame}



\begin{frame}
\frametitle{Stepping-out slice sampler}

To sample from $\theta|u,y$, let 
\begin{itemize}[<+->]
\item $\theta^{(i-1)}$ be the current draw for $\theta$
\item $u^{(1)}$ be the current draw for the auxiliary variable $u$
\item $w$ be a tuning parameter that you choose
\end{itemize}
Perform the following
\begin{enumerate}
\item Randomly place an interval $(\theta_L(u^{(i)}),\theta_U(u^{(i)}))$ of length $w$ around the current value $\theta^{(i-1)}$.
\item Step the endpoints of this interval out in increments of $w$ until $u^{(i)}>p(\theta_L(u^{(i)})|y)$ and $u^{(i)}>p(\theta_B(u^{(i)})|y)$.
\item Sample $\theta^* \sim Unif(\theta_L(u^{(i)}),\theta_L(u^{(i)}))$.
\item If $u^{(i)}<p(\theta^*|y)$, then set $\theta^{(i)} = \theta^*$, otherwise
  \begin{enumerate}
  \item set $\theta_L(u^{(i)}) = \theta^*$ if $\theta^* <  \theta^{(i-1)}$ or
  \item set $\theta_U(u^{(i)}) = \theta^*$ if $\theta^* > \theta^{(i-1)}$ and
  \item return to Step 3.
  \end{enumerate}
\end{enumerate}

\end{frame}



\begin{frame}
\frametitle{}
<<stepping_out_examples, dependson='bimodal_target'>>=
step_out_plot = function(theta, u, w, lim.=lim) {
  curve(target, -lim., lim., axes=F, frame=TRUE, xlab='', ylab='')
  points(theta, u, col='red', pch=19)
  abline(h=u, lty=3, col='gray')
  
  # Left endpoint
  L = theta - runif(1,0,.5)
  points(L,u)
  while(u<target(L)) points(L <- L-w, u)
  points(L,u, pch=8)
  
  # Right endpoint
  R = L + w
  points(R,u)
  while(u<target(R)) points(R <- R+w, u)
  points(R,u, pch=8)
  
  legend('topleft', c('Current', 'Endpoints'), pch=c(19,8), col=c('red','black'))
}


opar = par(mfrow=c(2,1), mar=rep(0.1,4))
w = 1
step_out_plot(2,.15,w)
step_out_plot(2,.05,w)
par(opar)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{}
<<create_interval, echo=TRUE>>=
create_interval = function(theta, u, target, w, max_steps) {
  L = theta - runif(1,0,w)
  R = L + w
  
  # Step out
  J = floor(max_steps * runif(1))
  K = (max_steps - 1) - J
  while ((u < target(L)) & J > 0) {
    L = L - w
    J = J - 1
  }
  while ((u < target(R)) & K > 0) {
    R = R + w
    K = K - 1
  }
  
  return(list(L=L,R=R))
}

shrink_and_sample = function(theta, u, target, int) {
  L = int$L; R = int$R
  
  repeat {
    theta_prop = runif(1, L, R)
    if (u < target(theta_prop)) 
      return(theta_prop)
    
    # shrink
    if (theta_prop > theta) 
      R = theta_prop
    if (theta_prop < theta) 
      L = theta_prop
  }
}
@
\end{frame}


\begin{frame}[fragile]
\frametitle{}
<<stepping_out_slice, dependson='create_interval', echo=TRUE>>=
slice = function(n, init_theta, target, w, max_steps) {
  u = theta = rep(NA, n)
  theta[1] = init_theta
  
  for (i in 2:n) {
    u[i] = runif(1, 0, target(theta[i - 1]))
    theta[i] = shrink_and_sample(theta = theta[i-1],
                            u = u[i], 
                            target = target, 
                            int = create_interval(theta = theta[i-1], 
                                                  u = u[i], 
                                                  target = target, 
                                                  w = w,
                                                  max_steps = max_steps))
  }
  return(data.frame(theta = theta, u = u))
}
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Sampling from mixture of normals}
<<mixture_of_normals_stepping_out, dependson=c('stepping_out_slice','bimodal_target'), echo=TRUE>>=
res = slice(n = 1e4, init_theta=0, target=target, w=1, max_steps=10)
@

<<stepping_out_histogram, dependson='mixture_of_normals_stepping_out'>>=
hist(res$theta, breaks = 101, prob=TRUE, main='Stepping out slice sampler for bimodal target', xlab=expression(theta), ylab='target')
curve(target, add=TRUE, col='red')
@
\end{frame}



\subsection{Doubling slice sampler}
\begin{frame}
\frametitle{Doubling slice sampler}

To sample from $\theta|u,y$, let 
\begin{itemize}[<+->]
\item $\theta^{(i-1)}$ be the current draw for $\theta$
\item $u^{(1)}$ be the current draw for the auxiliary variable $u$
\item $w$ be a tuning parameter that you choose
\end{itemize}
Perform the following
\begin{enumerate}
\item Randomly place an interval $(\theta_L(u^{(i)}),\theta_U(u^{(i)}))$ of length $w$ around the current value $\theta^{(i-1)}$.
\item Randomly double the size of the interval to either the left or right until $u^{(i)}>p(\theta_L(u^{(i)})|y)$ and $u^{(i)}>p(\theta_B(u^{(i)})|y)$.
\item Sample $\theta^* \sim Unif(\theta_L(u^{(i)}),\theta_L(u^{(i)}))$.
\item If $u^{(i)}<p(\theta^*|y)$ and a \alert{reversibility criterion} is satisfied, then set $\theta^{(i)} = \theta^*$, otherwise
  \begin{enumerate}
  \item set $\theta_L(u^{(i)}) = \theta^*$ if $\theta^* <  \theta^{(i-1)}$ or
  \item set $\theta_U(u^{(i)}) = \theta^*$ if $\theta^* > \theta^{(i-1)}$ and
  \item return to Step 3.
  \end{enumerate}
\end{enumerate}
\end{frame}



\begin{frame}
\frametitle{}
<<doubling_out_examples, dependson='bimodal_target'>>=
doubling_out_plot = function(theta, u, w, lim.=lim) {
  curve(target, -lim., lim., axes=F, frame=TRUE, xlab='', ylab='')
  points(theta, u, col='red', pch=19)
  abline(h=u, lty=3, col='gray')
  
  # Left endpoint
  L = theta - runif(1,0,.5)
  R = L + w
  points(L,u)
  points(R,u)
  
  # doubling
  while(u<target(L) | u<target(R)) {
    if (runif(1)<.5) {
      L = L - (R-L)
      points(L,u)
    } else {
      R = R + (R-L)
      points(R,u)
    }
    
  }
  
  points(L,u, pch=8)
  points(R,u, pch=8)
  
  legend('topleft', c('Current', 'Endpoints'), pch=c(19,8), col=c('red','black'))
}


opar = par(mfrow=c(2,1), mar=rep(0.1,4))
w = 1
lim = 10
doubling_out_plot(2,.15,w,lim)
doubling_out_plot(2,.05,w,lim)
par(opar)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Reversibility criterion}
\begin{quote}
This procedure works backward through the intervals that the doubling procedure would pass through to arrive at [the doubled interval] when starting from the new point, checking that none of [the intermediate intervals] has both ends outside the slice, which would lead to earlier termination of the doubling procedure.
\end{quote}

<<accept, echo=TRUE>>=
accept = function(theta0, theta1, L, R, u, w) {
    D = FALSE
    while (R - L > 1.1 * w) {
        M = (L + R)/2
        if ((theta0 < M & theta1 >= M) | (theta0 >= M & theta1 < M)) 
            D = TRUE
        if (theta1 < M) {
            R = M
        } else {
            L = M
        }
        if (D & u >= target(L) & u >= target(R)) {
            return(FALSE)
        }
    }
    return(TRUE)
}
@
\end{frame}


\begin{frame}[fragile]
\frametitle{}
<<doubling_slice_sampler, dependson='accept', echo=TRUE>>=
slice = function(n, init_theta, target, w, max_doubling) {
    u = theta = rep(NA, n)
    theta[1] = init_theta
    
    for (i in 2:n) {
        u[i] = runif(1, 0, target(theta[i - 1]))
        L = theta[i - 1] - runif(1, 0, w)
        R = L + w
        
        # Step out
        K = max_doubling
        while ((u[i] < target(L) | u[i] < target(R)) & K > 0) {
            if (runif(1) < 0.5) {
                L = L - (R - L)
            } else {
                R = R + (R - L)
            }
            K = K - 1
        }
        
        # Sample and shrink
        repeat {
            theta[i] = runif(1, L, R)
            if (u[i] < target(theta[i]) & accept(theta[i - 1], theta[i], L, R, u[i], w)) 
                break
            
            # shrink
            if (theta[i] > theta[i - 1]) 
                R = theta[i]
            if (theta[i] < theta[i - 1]) 
                L = theta[i]
        }
    }
    return(list(theta = theta, u = u))
}
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Doubling slice sampler for bimodal target}
<<doubling_slice_sampler_bimodal_target, dependson=c('bimodal_target','doubling_slice_sampler'), echo=TRUE>>=
res = slice(n=1e4, init_theta=0, target=target, w=1, max_doubling=10)
@

<<doubling_slice_sampler_bimodal_target_histogram, dependson='doubling_slice_sampler_bimodal_target'>>=
hist(res$theta, breaks = 101, prob=TRUE, main='Stepping out slice sampler for bimodal target', xlab=expression(theta), ylab='target')
curve(target, add=TRUE, col='red')
@

\end{frame}


\subsection{Multivariate slice sampling}
\begin{frame}
\frametitle{Multivariate slice sampling}

Suppose, we are interested in sampling from 
\[ 
p(\theta_1,\theta_2|y) = \int_0^{p(\theta_1,\theta_2|y)} 1\, du
\]
\pause




\begin{itemize}
\item Treat each variable independently, i.e. 
  \begin{enumerate}
  \item $u|\theta_1,\theta_2,y \sim Unif(0,p(\theta_1,\theta_2|y))$
  \item $\theta_1|u,\theta_2,y \sim Unif(u<p(\theta_1,\theta_2|y))$
  \item $\theta_2|u,\theta_1,y \sim Unif(u<p(\theta_1,\theta_2|y))$
  \end{enumerate}
  \begin{itemize}
  \item Use overrelaxation to avoid random walk behavior
  \end{itemize}
\item Hyperrectangle slice sampling
  \begin{itemize}
  \item Replace interval constructed from $w$ with a hyperrectangle $W$ placed randomly over the slice
  \item Shrink as points are rejected
  \end{itemize}
\item Reflective slice sampling
  \begin{itemize}
  \item Candidate samples are kept within the bounds by reflecting the direction of sampling when the boundary is hit
  \end{itemize}
\end{itemize}
\end{frame}


\end{document}

